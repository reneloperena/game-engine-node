// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file messages.proto (package com.breaktrivia.messages.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file messages.proto.
 */
export const file_messages: GenFile = /*@__PURE__*/
  fileDesc("Cg5tZXNzYWdlcy5wcm90bxIbY29tLmJyZWFrdHJpdmlhLm1lc3NhZ2VzLnYxIiYKE1RyaXZpYVNpZ25VcFJlcXVlc3QSDwoHZ2FtZV9pZBgBIAEoCSJwChRUcml2aWFTaWduVXBSZXNwb25zZRISCgpnYW1lX3N0YXRlGAEgASgJEhoKDW5leHRfcXVlc3Rpb24YAiABKAlIAIgBARIPCgJpdhgDIAEoCUgBiAEBQhAKDl9uZXh0X3F1ZXN0aW9uQgUKA19pdiJhChVBbnN3ZXJRdWVzdGlvblJlcXVlc3QSDwoHZ2FtZV9pZBgBIAEoCRISCgpnYW1lX3N0YXRlGAIgASgJEhMKC3F1ZXN0aW9uX2lkGAMgASgJEg4KBmFuc3dlchgEIAEoCSJyChZBbnN3ZXJRdWVzdGlvblJlc3BvbnNlEhIKCmdhbWVfc3RhdGUYASABKAkSGgoNbmV4dF9xdWVzdGlvbhgCIAEoCUgAiAEBEg8KAml2GAMgASgJSAGIAQFCEAoOX25leHRfcXVlc3Rpb25CBQoDX2l2Qr8BCh9jb20uY29tLmJyZWFrdHJpdmlhLm1lc3NhZ2VzLnYxQg1NZXNzYWdlc1Byb3RvUAGiAgNDQk2qAhtDb20uQnJlYWt0cml2aWEuTWVzc2FnZXMuVjHKAhtDb21cQnJlYWt0cml2aWFcTWVzc2FnZXNcVjHiAidDb21cQnJlYWt0cml2aWFcTWVzc2FnZXNcVjFcR1BCTWV0YWRhdGHqAh5Db206OkJyZWFrdHJpdmlhOjpNZXNzYWdlczo6VjFiBnByb3RvMw");

/**
 * Message Definitions
 *
 * @generated from message com.breaktrivia.messages.v1.TriviaSignUpRequest
 */
export type TriviaSignUpRequest = Message<"com.breaktrivia.messages.v1.TriviaSignUpRequest"> & {
  /**
   * Unique game session identifier
   *
   * @generated from field: string game_id = 1;
   */
  gameId: string;
};

/**
 * Describes the message com.breaktrivia.messages.v1.TriviaSignUpRequest.
 * Use `create(TriviaSignUpRequestSchema)` to create a new message.
 */
export const TriviaSignUpRequestSchema: GenMessage<TriviaSignUpRequest> = /*@__PURE__*/
  messageDesc(file_messages, 0);

/**
 * @generated from message com.breaktrivia.messages.v1.TriviaSignUpResponse
 */
export type TriviaSignUpResponse = Message<"com.breaktrivia.messages.v1.TriviaSignUpResponse"> & {
  /**
   * JWT containing the initial game state
   *
   * @generated from field: string game_state = 1;
   */
  gameState: string;

  /**
   * Encrypted next question payload (optional)
   *
   * @generated from field: optional string next_question = 2;
   */
  nextQuestion?: string;

  /**
   * Initialization Vector (IV) for decryption (optional)
   *
   * @generated from field: optional string iv = 3;
   */
  iv?: string;
};

/**
 * Describes the message com.breaktrivia.messages.v1.TriviaSignUpResponse.
 * Use `create(TriviaSignUpResponseSchema)` to create a new message.
 */
export const TriviaSignUpResponseSchema: GenMessage<TriviaSignUpResponse> = /*@__PURE__*/
  messageDesc(file_messages, 1);

/**
 * @generated from message com.breaktrivia.messages.v1.AnswerQuestionRequest
 */
export type AnswerQuestionRequest = Message<"com.breaktrivia.messages.v1.AnswerQuestionRequest"> & {
  /**
   * Unique game session identifier
   *
   * @generated from field: string game_id = 1;
   */
  gameId: string;

  /**
   * JWT containing the user's current game state
   *
   * @generated from field: string game_state = 2;
   */
  gameState: string;

  /**
   * Unique question identifier
   *
   * @generated from field: string question_id = 3;
   */
  questionId: string;

  /**
   * User's selected answer
   *
   * @generated from field: string answer = 4;
   */
  answer: string;
};

/**
 * Describes the message com.breaktrivia.messages.v1.AnswerQuestionRequest.
 * Use `create(AnswerQuestionRequestSchema)` to create a new message.
 */
export const AnswerQuestionRequestSchema: GenMessage<AnswerQuestionRequest> = /*@__PURE__*/
  messageDesc(file_messages, 2);

/**
 * @generated from message com.breaktrivia.messages.v1.AnswerQuestionResponse
 */
export type AnswerQuestionResponse = Message<"com.breaktrivia.messages.v1.AnswerQuestionResponse"> & {
  /**
   * Updated JWT containing the new game state
   *
   * @generated from field: string game_state = 1;
   */
  gameState: string;

  /**
   * Encrypted next question payload (optional)
   *
   * @generated from field: optional string next_question = 2;
   */
  nextQuestion?: string;

  /**
   * Initialization Vector (IV) for decryption (optional) 
   *
   * @generated from field: optional string iv = 3;
   */
  iv?: string;
};

/**
 * Describes the message com.breaktrivia.messages.v1.AnswerQuestionResponse.
 * Use `create(AnswerQuestionResponseSchema)` to create a new message.
 */
export const AnswerQuestionResponseSchema: GenMessage<AnswerQuestionResponse> = /*@__PURE__*/
  messageDesc(file_messages, 3);

